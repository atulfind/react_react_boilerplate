{"version":3,"sources":["components/Results/index.js","store/actions/result.js","components/Counter/index.js","store/actions/counter.js","App.js","serviceWorker.js","store/reducers/counter.js","store/reducers/result.js","index.js"],"names":["connect","state","ctr","counter","res","result","dispatch","onStoreResult","type","payload","onDeleteResult","className","onClick","length","map","index","key","id","value","onIncrementCounter","onDecrementCounter","onAddCounter","onSubtractCounter","Fragment","App","Boolean","window","location","hostname","match","initialState","reducer","action","Date","filtered","filter","rootReducer","combineReducers","counterReducer","resultReducer","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e8895b1f.chunk.js","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport * as resultActions from '../../store/actions/result';\n\nconst Results = ({res, ctr, onStoreResult, onDeleteResult}) => {\n\n  return (\n   <div className=\"results\">\n     <button onClick={()=> onStoreResult(ctr)}>Add to The Result</button>\n     {\n       res.length > 0 &&\n       <ul>\n       {\n         res.map((result, index)=> {\n          return(\n            <li key={index} onClick={()=> onDeleteResult(result.id)}>{result.value}</li>\n          )\n        })\n       }\n      </ul>\n     }\n   </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ctr: state.ctr.counter,\n    res: state.res.result\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onStoreResult: (result) => dispatch({ type: resultActions.STORE_RESULT, payload: result }),\n    onDeleteResult: (result) => dispatch({ type: resultActions.DELETE_RESULT, payload: result })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Results)\n","export const STORE_RESULT = 'STORE_RESULT';\nexport const DELETE_RESULT = 'DELETE_RESULT';","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as counterActions from '../../store/actions/counter';\nimport Results from '../Results';\n\nconst Counter = ({ ctr, onIncrementCounter, onAddCounter, onSubtractCounter, onDecrementCounter}) => {\n  return (\n    <React.Fragment>\n        <div className=\"header\">\n      <button onClick={onDecrementCounter}>DECREMENT</button>\n      <button onClick={onIncrementCounter}>INCREMENT</button>\n      <span> {ctr}</span>\n      <button onClick={onAddCounter}>ADD 10</button>\n      <button onClick={onSubtractCounter}>SUBTRACT 10</button>\n    </div>\n     <Results/>\n    </React.Fragment>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ctr: state.ctr.counter,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onIncrementCounter: () => dispatch({ type: counterActions.INCREMENT }),\n    onDecrementCounter: () => dispatch({ type: counterActions.DECREMENT }),\n    onAddCounter: () => dispatch({ type: counterActions.ADD, payload: 10 }),\n    onSubtractCounter: () => dispatch({ type: counterActions.SUBTRACT, payload: 10 }),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter)\n","export const INCREMENT = 'INCREMENT';\nexport const DECREMENT = 'DECREMENT';\nexport const ADD = 'ADD';\nexport const SUBTRACT = 'SUBTRACT';\n\n\n\n\n","import React from 'react';\nimport './App.css';\nimport Counter from './components/Counter';\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <Counter/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/counter';\n\nconst initialState = {\n  counter: 0\n}\n\nconst reducer = (state = initialState, action)=> {\n  switch (action.type) {\n    case actionTypes.INCREMENT:\n      return {...state, counter: state.counter + 1}\n    case actionTypes.DECREMENT:\n      return {...state, counter: state.counter - 1}\n    case actionTypes.ADD:\n      return {...state, counter: state.counter + action.payload}\n    case actionTypes.SUBTRACT:\n      return {...state, counter: state.counter - action.payload}\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","import * as actionTypes from '../actions/result';\n\nconst initialState = {\n  result: []\n}\n\nconst reducer = (state = initialState, action)=> {\n  switch (action.type) {\n    case actionTypes.STORE_RESULT:\n      return {...state, result: [{id: new Date(), value: action.payload}, ...state.result]}\n    case actionTypes.DELETE_RESULT:\n      const filtered = state.result.filter(result => result.id !== action.payload)\n      return {...state, result: filtered}\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore, combineReducers} from 'redux';\nimport {Provider} from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport counterReducer from './store/reducers/counter';\nimport resultReducer from './store/reducers/result';\n\nconst rootReducer = combineReducers({\n  ctr: counterReducer,\n  res: resultReducer\n})\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}