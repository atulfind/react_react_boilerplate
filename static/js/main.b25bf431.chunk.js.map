{"version":3,"sources":["components/Results/index.js","store/actions/result.js","components/Counter/index.js","store/actions/counter.js","App.js","serviceWorker.js","store/reducers/counter.js","store/reducers/result.js","index.js"],"names":["connect","state","ctr","counter","res","result","dispatch","onStoreResult","type","payload","onDeleteResult","className","onClick","length","map","index","key","id","value","onIncrementCounter","onDecrementCounter","onAddCounter","onSubtractCounter","Fragment","App","mobileBack","useCallback","event","data","direction","document","querySelector","style","backgroundColor","useEffect","window","addEventListener","removeEventListener","Boolean","location","hostname","match","initialState","reducer","action","Date","filtered","filter","rootReducer","combineReducers","counterReducer","resultReducer","store","createStore","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b25bf431.chunk.js","sourcesContent":["import React, { useCallback, useEffect } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as resultActions from '../../store/actions/result';\r\n\r\nconst Results = ({res, ctr, onStoreResult, onDeleteResult}) => {\r\n\r\n  \r\n\r\n  return (\r\n   <div className=\"results\">\r\n     <button onClick={()=> onStoreResult(ctr)}>Add to The Result</button>\r\n     {\r\n       res.length > 0 &&\r\n       <ul>\r\n       {\r\n         res.map((result, index)=> {\r\n          return(\r\n            <li key={index} onClick={()=> onDeleteResult(result.id)}>{result.value}</li>\r\n          )\r\n        })\r\n       }\r\n      </ul>\r\n     }\r\n   </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ctr: state.ctr.counter,\r\n    res: state.res.result\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onStoreResult: (result) => dispatch({ type: resultActions.STORE_RESULT, payload: result }),\r\n    onDeleteResult: (result) => dispatch({ type: resultActions.DELETE_RESULT, payload: result })\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Results)\r\n","export const STORE_RESULT = 'STORE_RESULT';\r\nexport const DELETE_RESULT = 'DELETE_RESULT';","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as counterActions from '../../store/actions/counter';\r\nimport Results from '../Results';\r\n\r\nconst Counter = ({ ctr, onIncrementCounter, onAddCounter, onSubtractCounter, onDecrementCounter}) => {\r\n  return (\r\n    <React.Fragment>\r\n        <div className=\"header\">\r\n      <button onClick={onDecrementCounter}>DECREMENT</button>\r\n      <button onClick={onIncrementCounter}>INCREMENT</button>\r\n      <span> {ctr}</span>\r\n      <button onClick={onAddCounter}>ADD 10</button>\r\n      <button onClick={onSubtractCounter}>SUBTRACT 10</button>\r\n    </div>\r\n     <Results/>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ctr: state.ctr.counter,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onIncrementCounter: () => dispatch({ type: counterActions.INCREMENT }),\r\n    onDecrementCounter: () => dispatch({ type: counterActions.DECREMENT }),\r\n    onAddCounter: () => dispatch({ type: counterActions.ADD, payload: 10 }),\r\n    onSubtractCounter: () => dispatch({ type: counterActions.SUBTRACT, payload: 10 }),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter)\r\n","export const INCREMENT = 'INCREMENT';\r\nexport const DECREMENT = 'DECREMENT';\r\nexport const ADD = 'ADD';\r\nexport const SUBTRACT = 'SUBTRACT';\r\n\r\n\r\n\r\n\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport './App.css';\r\nimport Counter from './components/Counter';\r\n\r\nfunction App() {\r\n\r\n  const mobileBack = useCallback((event, data) => {\r\n\t\tconst direction = data.state.direction\r\n\t\tif (direction === 'back') {\r\n      const el = document.querySelector('body')\r\n      el.style.backgroundColor = 'red';\r\n\t\t}\r\n\t},[])\r\n\r\n\tuseEffect(() => {\r\n\t\twindow.addEventListener('navigate', mobileBack)\r\n\t\treturn ()=> {\r\n\t\t\twindow.removeEventListener('navigate', mobileBack)\r\n\t\t}\r\n  }, [mobileBack])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Counter/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as actionTypes from '../actions/counter';\r\n\r\nconst initialState = {\r\n  counter: 0\r\n}\r\n\r\nconst reducer = (state = initialState, action)=> {\r\n  switch (action.type) {\r\n    case actionTypes.INCREMENT:\r\n      return {...state, counter: state.counter + 1}\r\n    case actionTypes.DECREMENT:\r\n      return {...state, counter: state.counter - 1}\r\n    case actionTypes.ADD:\r\n      return {...state, counter: state.counter + action.payload}\r\n    case actionTypes.SUBTRACT:\r\n      return {...state, counter: state.counter - action.payload}\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/result';\r\n\r\nconst initialState = {\r\n  result: []\r\n}\r\n\r\nconst reducer = (state = initialState, action)=> {\r\n  switch (action.type) {\r\n    case actionTypes.STORE_RESULT:\r\n      return {...state, result: [{id: new Date(), value: action.payload}, ...state.result]}\r\n    case actionTypes.DELETE_RESULT:\r\n      const filtered = state.result.filter(result => result.id !== action.payload)\r\n      return {...state, result: filtered}\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {createStore, combineReducers} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport counterReducer from './store/reducers/counter';\r\nimport resultReducer from './store/reducers/result';\r\n\r\nconst rootReducer = combineReducers({\r\n  ctr: counterReducer,\r\n  res: resultReducer\r\n})\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}